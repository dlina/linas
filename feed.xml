<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">Network Analysis of Dramatic Texts</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://dlina.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="https://dlina.github.io/" />
<updated>2018-01-28T14:00:33+01:00</updated>
<id>https://dlina.github.io/</id>
<author>
  <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
  <uri>https://dlina.github.io/</uri>
  <email></email>
</author>


<entry>
  <title type="html"><![CDATA[Hartleben, Otto Erich: Hanna Jagert (1893)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation99/"/>
  <id>https://dlina.github.io/animation99</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation99.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation99/&quot;&gt;Hartleben, Otto Erich: Hanna Jagert (1893)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Thoma, Ludwig: Erster Klasse (1910)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation98/"/>
  <id>https://dlina.github.io/animation98</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation98.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation98/&quot;&gt;Thoma, Ludwig: Erster Klasse (1910)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Scheerbart, Paul: Die Wurzeln der Wohlhabenheit (1904)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation97/"/>
  <id>https://dlina.github.io/animation97</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation97.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation97/&quot;&gt;Scheerbart, Paul: Die Wurzeln der Wohlhabenheit (1904)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Schiller, Friedrich: Kabale und Liebe (1784)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation96/"/>
  <id>https://dlina.github.io/animation96</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation96.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation96/&quot;&gt;Schiller, Friedrich: Kabale und Liebe (1784)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Sonnleithner, Joseph Ferdinand von: Fidelio (1805)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation95/"/>
  <id>https://dlina.github.io/animation95</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation95.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation95/&quot;&gt;Sonnleithner, Joseph Ferdinand von: Fidelio (1805)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lortzing, Albert (Gustav): Zar und Zimmermann (1837)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation94/"/>
  <id>https://dlina.github.io/animation94</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation94.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation94/&quot;&gt;Lortzing, Albert (Gustav): Zar und Zimmermann (1837)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Kaiser, Friedrich: Die Schule des Armen oder Zwei Millionen (1847)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation93/"/>
  <id>https://dlina.github.io/animation93</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation93.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation93/&quot;&gt;Kaiser, Friedrich: Die Schule des Armen oder Zwei Millionen (1847)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Birch-Pfeiffer, Charlotte: Vatersorgen (1850)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation92/"/>
  <id>https://dlina.github.io/animation92</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation92.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation92/&quot;&gt;Birch-Pfeiffer, Charlotte: Vatersorgen (1850)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Uhland, Ludwig: Ernst Herzog von Schwaben (1818)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation91/"/>
  <id>https://dlina.github.io/animation91</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation91.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation91/&quot;&gt;Uhland, Ludwig: Ernst Herzog von Schwaben (1818)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Beer, Michael: Struensee (1828)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation90/"/>
  <id>https://dlina.github.io/animation90</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation90.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation90/&quot;&gt;Beer, Michael: Struensee (1828)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Gotter, Friedrich Wilhelm: Der Dorfjahrmarkt (1775)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation9/"/>
  <id>https://dlina.github.io/animation9</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation9.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation9/&quot;&gt;Gotter, Friedrich Wilhelm: Der Dorfjahrmarkt (1775)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Schnitzler, Arthur: Anatol (1891)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation89/"/>
  <id>https://dlina.github.io/animation89</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation89.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation89/&quot;&gt;Schnitzler, Arthur: Anatol (1891)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lessing, Gotthold Ephraim: Emilia Galotti (1772)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation88/"/>
  <id>https://dlina.github.io/animation88</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation88.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation88/&quot;&gt;Lessing, Gotthold Ephraim: Emilia Galotti (1772)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lessing, Gotthold Ephraim: Miß Sara Sampson (1755)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation87/"/>
  <id>https://dlina.github.io/animation87</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation87.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation87/&quot;&gt;Lessing, Gotthold Ephraim: Miß Sara Sampson (1755)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Schiller, Friedrich: Die Piccolomini (1799)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation86/"/>
  <id>https://dlina.github.io/animation86</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation86.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation86/&quot;&gt;Schiller, Friedrich: Die Piccolomini (1799)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Büchner, Georg: Dantons Tod (1834)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation85/"/>
  <id>https://dlina.github.io/animation85</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation85.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation85/&quot;&gt;Büchner, Georg: Dantons Tod (1834)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Panizza, Oskar: Das Liebeskonzil (1895)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation84/"/>
  <id>https://dlina.github.io/animation84</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation84.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation84/&quot;&gt;Panizza, Oskar: Das Liebeskonzil (1895)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Nestroy, Johann: Der Talisman (1843)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation83/"/>
  <id>https://dlina.github.io/animation83</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation83.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation83/&quot;&gt;Nestroy, Johann: Der Talisman (1843)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Goethe, Johann Wolfgang von: Torquato Tasso (1788)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation82/"/>
  <id>https://dlina.github.io/animation82</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation82.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation82/&quot;&gt;Goethe, Johann Wolfgang von: Torquato Tasso (1788)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Rosenow, Emil: Kater Lampe (1902)]]></title>
  <link rel="alternate" type="text/html" href="https://dlina.github.io/animation81/"/>
  <id>https://dlina.github.io/animation81</id>
  <published>2016-04-18T00:00:00+02:00</published>
  <updated>2016-04-18T00:00:00+02:00</updated>
  <author>
    <name>Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke</name>
    <uri>https://dlina.github.io</uri>
    <email></email>
  </author>
  
  <content type="html">
  
    &lt;div class=&quot;row&quot; id=&quot;animation&quot;&gt;
&lt;div class=&quot;small-12 small-centered columns&quot;&gt;
	&lt;h2 id=&quot;SomethingBeforeAnAct&quot;&gt;&lt;/h2&gt;
	&lt;h3 id=&quot;act&quot;&gt;&lt;/h3&gt;
	&lt;h4 id=&quot;scene&quot;&gt;&lt;/h4&gt;
	&lt;div id=&quot;vis&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progress large-12 success&quot;&gt;
      &lt;span id=&quot;progressiveBar&quot; style=&quot;width: 0%&quot; class=&quot;meter&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
	&lt;ul id=&quot;cast&quot;&gt;&lt;/ul&gt;
&lt;script&gt;
var width = 840,
    height = 500;

var nodes = [],
    links = [];

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .charge(-400)
    .linkDistance(100)
    .size([width, height])
    .on(&quot;tick&quot;, tick);

var svg = d3.select(&quot;#vis&quot;).append(&quot;svg&quot;)
    .attr(&quot;width&quot;, width)
    .attr(&quot;height&quot;, height);

var node = svg.selectAll(&quot;.node&quot;),
    link = svg.selectAll(&quot;.link&quot;);


function rmNodes(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = nodes.length - 1; i &gt;= 0; i--) {
      if( nodes[i].id === rm[m] ) { nodes.splice(i,1); }
    }
  }
}
function rmLinks(rm) {
  for (m = 0; m &lt; rm.length; m++) {
    for (i = links.length - 1; i &gt;= 0; i--) {
      if( links[i].source.id === rm[m] || links[i].target.id === rm[m] ) { links.splice(i,1); }
    }
  }
}
function compare(a,b) {
  if (a.id &lt; b.id)
    return -1;
  else if (a.id &gt; b.id)
    return 1;
  else
    return 0;
}

function start() {
  link = link.data(force.links(), function(d) { return d.source.id + &quot;-&quot; + d.target.id; });
  link.enter().insert(&quot;line&quot;, &quot;.node&quot;).attr(&quot;class&quot;, &quot;link&quot;);
  link.exit().remove();

  node = node.data(force.nodes(), function(d) { return d.id;});
  node.enter().append(&quot;circle&quot;).attr(&quot;class&quot;, function(d) { return &quot;node &quot; + d.id; }).attr(&quot;r&quot;, 8);
  node.exit().remove();

// add a dynamic legend
var cast = document.getElementById('cast');
cast.innerHTML = '';
for (i=0; i &lt; nodes.length; i++){
	var entry = document.createElement('li');
	entry.innerHTML = '&lt;svg height=&quot;16&quot; width=&quot;16&quot;&gt; &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;8&quot; class=&quot;node '+nodes[i].id+'&quot;&gt;&lt;/circle&gt; &lt;/svg&gt; '+nodes[i].name;
	cast.appendChild(entry);
}
  force.start();
}

function tick() {
  node.attr(&quot;cx&quot;, function(d) { return d.x; })
      .attr(&quot;cy&quot;, function(d) { return d.y; })

  link.attr(&quot;x1&quot;, function(d) { return d.source.x; })
      .attr(&quot;y1&quot;, function(d) { return d.source.y; })
      .attr(&quot;x2&quot;, function(d) { return d.target.x; })
      .attr(&quot;y2&quot;, function(d) { return d.target.y; });
}
&lt;/script&gt;

&lt;script src=&quot;https://dlina.github.io/data/animation81.js&quot;&gt;&lt;/script&gt;

&lt;/div&gt;&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;https://dlina.github.io/animation81/&quot;&gt;Rosenow, Emil: Kater Lampe (1902)&lt;/a&gt; was originally published by Frank Fischer, Mathias Göbel, Dario Kampkaspar, Peer Trilcke at &lt;a href=&quot;https://dlina.github.io&quot;&gt;Network Analysis of Dramatic Texts&lt;/a&gt; on April 18, 2016.&lt;/p&gt;</content>
</entry>

</feed>
